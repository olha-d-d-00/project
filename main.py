import os
import pandas as pd
from core.data_loader import DataLoader
from strategies.sma_cross import run_sma_crossover
from strategies.rsi_bb import run_rsi_bb_strategy
from strategies.vwap_reversion import run_vwap_reversion_strategy
from core.backtester import run_backtest

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
os.makedirs("results", exist_ok=True)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
loader = DataLoader()
df = loader.load_parquet()

print()

# === –°—Ç—Ä–∞—Ç–µ–≥—ñ—è SMA ===
print("\nüöÄ –û–±—Ä–æ–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: SMA")
sma_df = pd.concat([
    run_sma_crossover(df[df["symbol"] == symbol].copy()).assign(symbol=symbol)
    for symbol in df["symbol"].unique()
])
sma_df.to_csv("results/sma_signals.csv", index=True)
print("‚úÖ –°–∏–≥–Ω–∞–ª–∏ SMA –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ results/sma_signals.csv")
print("üìä —Å–∏–≥–Ω–∞–ª\n", sma_df["signal"].value_counts())
run_backtest(sma_df, "sma")

# === –°—Ç—Ä–∞—Ç–µ–≥—ñ—è RSI + Bollinger Bands ===
print("\nüöÄ –û–±—Ä–æ–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: RSI + Bollinger Bands")
rsi_bb_df = pd.concat([
    run_rsi_bb_strategy(df[df["symbol"] == symbol].copy()).assign(symbol=symbol)
    for symbol in df["symbol"].unique()
])
rsi_bb_df.to_csv("results/rsi_bb_signals.csv", index=True)
print("‚úÖ –°–∏–≥–Ω–∞–ª–∏ RSI + BB –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ results/rsi_bb_signals.csv")
print("üìä –°–∏–≥–Ω–∞–ª–∏ RSI + BB (Buy/Sell):\n", rsi_bb_df["signal"].value_counts())
run_backtest(rsi_bb_df, "rsi_bb")

# === –°—Ç—Ä–∞—Ç–µ–≥—ñ—è VWAP Reversion ===
print("\nüöÄ –û–±—Ä–æ–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: VWAP Reversion")
vwap_df = pd.concat([
    run_vwap_reversion_strategy(df[df["symbol"] == symbol].copy()).assign(symbol=symbol)
    for symbol in df["symbol"].unique()
])
vwap_df.to_csv("results/vwap_reversion_signals.csv", index=True)
print("‚úÖ –°–∏–≥–Ω–∞–ª–∏ VWAP –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ results/vwap_reversion_signals.csv")
print("üìä –°–∏–≥–Ω–∞–ª–∏ VWAP (Buy/Sell):\n", vwap_df["signal"].value_counts())
run_backtest(vwap_df, "vwap_reversion")